using System.Collections.Generic;
using System.Threading.Tasks;
using System.Reflection;
using System.Drawing;
using System.Linq;
using System.Text;
using System.IO;
using System;

namespace Documentation
{
    public static class Program
    {
        public static int Main(string[] args)
        {
            try
            {
                Bitmap bmp = Properties.Resources.emma;
                Assembly asm = Assembly.LoadFrom(args[0]);
                FileInfo targ = new FileInfo(args[1]);
                string targdir = targ.Directory.FullName;
                Type fx_base = asm.GetType("SeeSharp.BitmapEffect");
                Type fx_inst = asm.GetType("SeeSharp.InstagramEffect");
                Type fx_matr = asm.GetType("SeeSharp.MatrixConvolutionBitmapEffect");
                IEnumerable<(object, Type)> effects = from t in asm.GetTypes()
                                                      where !t.IsAbstract
                                                      where t.IsClass
                                                      where fx_base.IsAssignableFrom(t)
                                                      orderby t.Name ascending
                                                      let attr = t.GetCustomAttributes(true)
                                                      let obs = from a in attr
                                                                where a is ObsoleteAttribute
                                                                select a
                                                      where !obs.Any()
                                                      let cons = from c in t.GetConstructors()
                                                                 where c.GetParameters().Length == 0
                                                                 select c
                                                      where cons.Any()
                                                      select (Activator.CreateInstance(t), t);

                foreach (FileInfo file in targ.Directory.GetFiles())
                    file.Delete();

                StringBuilder sb = new StringBuilder();

                sb.AppendLine($@"<!-- Autogenerated : {DateTime.Now:yyyy-MM-dd HH:mm:ss:ffffff} -->
# See# (See Sharp) documentation

<img src=""./{args[2]}favicon.ico"" height=""50""/>

_**WARNING:** The library's soruce code is not for the faint of heart. It is ported legacy-code from an older project._

### Defined effects:
");
                foreach ((object fx, Type type) in effects)
                {
                    sb.AppendLine($" - **`{type.Name}`**");

                    if (fx_matr.IsAssignableFrom(type) || fx_inst.IsAssignableFrom(type))
                    {
                        string file = $"{type.FullName.ToLower()}.png";

                        (fx_base.GetMethod("Apply").Invoke(fx, new object[] { bmp }) as Bitmap).Save($"{targdir}\\{file}");

                        sb.AppendLine($@"   <br/><img src=""./{file}"" height=""200""/>");
                    }
                }

                using (FileStream fs = new FileStream(targ.FullName, FileMode.OpenOrCreate, FileAccess.ReadWrite, FileShare.Read))
                using (StreamWriter sw = new StreamWriter(fs))
                {
                    fs.Seek(0, SeekOrigin.Begin);
                    sw.Write(sb.ToString());
                }

                return 0;
            }
            catch (Exception ex)
            {
                Console.WriteLine("========================================= START OF ERROR REPORT =========================================");

                while (ex != null)
                {
                    Console.WriteLine($"{ex.Message}\n{ex.StackTrace}");

                    ex = ex.InnerException;
                }

                Console.WriteLine("========================================== END OF ERROR REPORT ==========================================");

                return -1;
            }
        }
    }
}
